"use strict";var Employee="\n    % next(parent, child);\n    next(root , a).\n    next(a , b).\n    next(b , c). \n    next(c , d).\n    next(c , e).\n    next(c , f).\n    next(d , g).\n    next(g , h).\n    next(h , i).\n    next(i , j).\n    next(i , k).\n    next(j , l).\n    next(k , l).\n    next(e , g).\n    next(i , m).\n    next(m , n).\n    next(m , o). \n    next(m , p).\n    next(n , q). \n    next(q , r).\n    next(o , r).\n    next(p , r).\n    next(r , s).\n    next(f , t).\n    next(t , u).\n    next(u , v).\n    next(u , w).\n    next(v , x).\n    next(w , y).\n    next(x , z).\n    next(y , z).\n\n    % Reverse List \n    reverse([] , A , A). \n    reverse([H|T] , A , R):-  reverse(T , [H | A] , R).\n\n    % Get Path Of Learning \n    getPath(Start , Ans , End) :- Start == root , path(Start , ReversedAns , End) , reverse(ReversedAns , [] , Ans).\n    getPath(Start , [Start|TAns], End) :- Start \\== root , path(Start , ReversedAns , End) , reverse(ReversedAns , [] , TAns). \n\n    path(Start , [] , Start).\n    path(Start , [Cur | TR] , Cur) :- Start \\== Cur , next(NXT , Cur) , path(Start , TR , NXT).\n\n    % Member\n    member(X,[X|_]).\n    member(X,[Y|R]) :- X \\== Y , member(X , R).\n\n    % Intersection (SET A - SET B) \n    intersection([], M, []).\n    intersection([X|Y], M, [X|Z]) :- (\\+ member(X, M)), intersection(Y, M, Z).\n    intersection([X|Y], M, Z) :- member(X, M), intersection(Y, M, Z).\n    \n\n    % What Should Employee Learn?? \n    % [_ , _ , _ , _ , EmpKnowledge] employee list\n    % [employee id, employee name ,employee salary , employee experiance , employee Knowledge];\n    getToLearn([_ , _ , _ , _ , EmpKnowledge] , Ans , Target) :- getPath(root , Path , Target) , intersection(Path , EmpKnowledge , Ans).\n\n    % Finding the right employees for a specific task\n    searhOnItem(_ , [] , -1).\n    searhOnItem(Search , [Search | _] , 1).\n    searhOnItem(Search , [_ | TReq] , Flag) :- searhOnItem(Search , TReq , Flag).\n\n    matchIfContain([] , _ , 1).\n    matchIfContain([HEmp | _] , Req , -1) :- searhOnItem(HEmp , Req , Flag) , Flag < 0.\n    matchIfContain([HEmp | TEmp] , Req , Flag2) :- searhOnItem(HEmp , Req , Flag) , Flag > 0  , matchIfContain(TEmp , Req , Flag2).\n\n\n    solve([] , _ , []).\n\n    solve([[_ , EmpName , _ , _ , EmpKn] | TEmp] , Req , [EmpName | TRes]) :- \n    matchIfContain(Req , EmpKn , Flag) , Flag > 0 , solve(TEmp , Req , TRes).\n\n    solve([[_ , _ , _ , _ , EmpKn] | TEmp] , Req , Res) :- \n    matchIfContain(Req , EmpKn , Flag) , Flag < 0 , solve(TEmp , Req , Res).\n\n    % Finding The Max Salary Employee \n    maxSalaryList([X] , X).\n    maxSalaryList(\n        [\n            [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1],\n            [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] | TEmp\n        ] , Max) :- \n    maxSalaryList([[EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] | TEmp] , MaxRest) , \t\n    maxSalaryTwoEmployees(   [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] , MaxRest , Max).\n\n    maxSalaryTwoEmployees([EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] % first employee\n    , [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] % secound employee\n    , [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] % result employee max salary\n    ) :-  EmpSal1 >= EmpSal2.\n    \n    maxSalaryTwoEmployees([EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2]) :-  EmpSal1 <  EmpSal2.\n\n\n    % Finding The Min Salary Employee \n    minSalaryList([X] , X).\n    minSalaryList(\n        [\n            [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1],\n            [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] | TEmp\n        ] , Min) :- minSalaryList([[EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] | TEmp] , MinRest),\n    minSalaryTwoEmployees([EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] , MinRest , Min).\n\n    minSalaryTwoEmployees([EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] \n    , [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1]) :-  EmpSal1 <  EmpSal2.\n    \n    minSalaryTwoEmployees([EmpId1 , EmpName1 , EmpSal1 , EmpYears1 , EmpKnowledge1] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpYears2 , EmpKnowledge2] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpYears2 , EmpKnowledge2]) :-  EmpSal1 >= EmpSal2.\n\n    % Finding The Max Experience Employee \n    maxExperList([X] , X).\n    maxExperList(\n        [\n            [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1],\n            [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] | TEmp\n        ], Max) :- maxExperList([[EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] | TEmp] , MaxRest), \t\n    maxExperTwoEmployees(   [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] , MaxRest , Max).\n\n    maxExperTwoEmployees([EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] \n    , [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1]) :-  EmpExperience1 >= EmpExperience2.\n    \n    maxExperTwoEmployees([EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2]) :-  EmpExperience1 <  EmpExperience2.\n\n    % Finding The Min Experience Employee where Experience int number meaning year of Experience\n    minExperList([X] , X).\n    minExperList(\n        [\n            [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1],\n            [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] | TEmp\n        ], Min) :- minExperList([[EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] | TEmp] , MinRest),\n    minExperTwoEmployees(   [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] , MinRest , Min).\n\n    minExperTwoEmployees([EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] \n    , [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1]) :-  EmpExperience1 <  EmpExperience2.\n    \n    minExperTwoEmployees([EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2]) :-  EmpExperience1 >= EmpExperience2.\n\n    % Arranging Employees According To The Salary In Ascending Order\n    mergesort1([] , []).\n    mergesort1([A] , [A]).\n    mergesort1([A , B | R] , S) :- split1([A , B | R] , L1 , L2) , mergesort1(L1 , S1) , mergesort1(L2 , S2) , merge1(S1 , S2 , S).\n\n    split1([] , [] , []). \n    split1([A] , [A] , []).\n    split1([A , B | R] , [A | Ra] , [B | Rb]) :- split1(R , Ra , Rb).\n\n    merge1(A , [] , A).\n    merge1([] , B , B).\n    merge1(\n        [\n            [EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra\n        ],[\n            [EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb\n        ],[\n            [EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | M\n        ]) :- EmpSalA =< EmpSalB\n        , merge1(Ra , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] , M).\n\n    merge1([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | M ]) :- EmpSalA  > EmpSalB \n        , merge1([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] , Rb , M).\n    \n    % Arranging Employees According To The Salary In Descending Order\n    mergesort2([] , []).\n    mergesort2([A] , [A]).\n    mergesort2([A , B | R] , S) :- split2([A , B | R] , L1 , L2) , mergesort2(L1 , S1) , mergesort2(L2 , S2) , merge2(S1 , S2 , S).\n    split2([] , [] , []). \n    split2([A] , [A] , []).\n    split2([A , B | R] , [A | Ra] , [B | Rb]) :- split2(R , Ra , Rb).\n    merge2(A , [] , A).\n    merge2([] , B , B).\n    merge2([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | M ]) :- EmpSalA  > EmpSalB \n        , merge2(Ra , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] , M).\n    merge2([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | M ]) :- EmpSalA =< EmpSalB \n        , merge2([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] , Rb , M).   \n    \n    % Arranging Employees According To The Experience In Ascending Order\n    mergesort3([] , []).\n    mergesort3([A] , [A]).\n    mergesort3([A , B | R] , S) :- split3([A , B | R] , L1 , L2) , mergesort3(L1 , S1) , mergesort3(L2 , S2) , merge3(S1 , S2 , S).\n    split3([] , [] , []). \n    split3([A] , [A] , []).\n    split3([A , B | R] , [A | Ra] , [B | Rb]) :- split3(R , Ra , Rb).\n    merge3(A , [] , A).\n    merge3([] , B , B).\n    merge3([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | M ]) :- EmpExperienceA =< EmpExperienceB \n        , merge3(Ra , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] , M).\n    merge3([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | M ]) :- EmpExperienceA  > EmpExperienceB \n        , merge3([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] , Rb , M).\n    \n    % Arranging Employees According To The Experience In Descending Order\n    mergesort4([] , []).\n    mergesort4([A] , [A]).\n    mergesort4([A , B | R] , S) :- split4([A , B | R] , L1 , L2) , mergesort4(L1 , S1) , mergesort4(L2 , S2) , merge4(S1 , S2 , S).\n    split4([] , [] , []). \n    split4([A] , [A] , []).\n    split4([A , B | R] , [A | Ra] , [B | Rb]) :- split4(R , Ra , Rb).\n    merge4(A , [] , A).\n    merge4([] , B , B).\n    merge4([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | M ]) :- EmpExperienceA  > EmpExperienceB \n        , merge4(Ra , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] , M).\n    merge4([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | M ]) :- EmpExperienceA =< EmpExperienceB \n        , merge4([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] , Rb , M).\n\n    % Arranging Employees According To The Number Of Knowledges In Ascending Order\n    mergesort5([] , []).\n    mergesort5([A] , [A]).\n    mergesort5([A , B | R] , S) :- split5([A , B | R] , L1 , L2) , mergesort5(L1 , S1) , mergesort5(L2 , S2) , merge5(S1 , S2 , S).\n    split5([] , [] , []). \n    split5([A] , [A] , []).\n    split5([A , B | R] , [A | Ra] , [B | Rb]) :- split5(R , Ra , Rb).\n    merge5(A , [] , A).\n    merge5([] , B , B).\n    merge5([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | M ]) :- \n        length(EmpKnowledgeA , NA) \n        , length(EmpKnowledgeB , NB) \n        , NA =< NB \n        , merge5(Ra , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] , M).\n    merge5([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | M ]) :- \n        length(EmpKnowledgeA , NA) \n        , length(EmpKnowledgeB , NB) \n        , NA  > NB \n        , merge5([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] , Rb , M).\n    \n    % Arranging Employees According To The Number Of Knowledges In Descending Order\n    mergesort6([] , []).\n    mergesort6([A] , [A]).\n    mergesort6([A , B | R] , S) :- split6([A , B | R] , L1 , L2) , mergesort6(L1 , S1) , mergesort6(L2 , S2) , merge6(S1 , S2 , S).\n    split6([] , [] , []). \n    split6([A] , [A] , []).\n    split6([A , B | R] , [A | Ra] , [B | Rb]) :- split6(R , Ra , Rb).\n    merge6(A , [] , A).\n    merge6([] , B , B).\n    merge6([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | M ]) :- \n        length(EmpKnowledgeA , NA) \n        , length(EmpKnowledgeB , NB) \n        , NA  > NB \n        , merge6(Ra , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] , M).\n    merge6([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | M ]) :- \n        length(EmpKnowledgeA , NA) \n        , length(EmpKnowledgeB , NB) \n        , NA =< NB \n        , merge6([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] , Rb , M).\n    \n    % Counting Number Of Elements In List\n    length([] , 0).\n    length([H | T] , Length) :- length(T , Length1) , Length is Length1 + 1.\n\n    % Getting Sum Of Salarys \n    sum([] , 0).\n    sum([[_ , _ , Sal , _ , _] | TEmp] , Sum) :- sum(TEmp , Sum1) , Sum is Sum1 + Sal.\n",employeeList="[[1 , ahmad , 100 , 2 , [a , b , c]],[2 , amjad , 300 , 3 , [a , c , d]],[3 , ali , 200 , 1 , [a , d , e]],[4 , fadi , 400 , 4 , [a , e , f]],[4 , hadi , 700 , 3 , [a , e]]]",session=pl.create();$(".get-to-learn").on("click",function(){session.consult(Employee,{success:function(){session.query("getToLearn([1 , ahmad , 100 , 2 , [a , b]], Ans, c).",{success:function(e){session.answer({success:function(e){console.log(session.format_answer(e)),session.answer({success:function(e){console.log(session.format_answer(e))}})}})},error:function(e){console.log(e)}})}})}),$(".get-max-salary").on("click",function(){session.consult(Employee,{success:function(){session.query("maxSalaryList(".concat(employeeList,", Ans)."),{success:function(e){session.answer({success:function(e){e=session.format_answer(e).split("=")[1];e=(e=(e=e.split("[")[1]).split("]")[0]).split(","),$("#maxSalary").val("".concat(e[1]," his salary is : ").concat(e[2]))}})},error:function(e){console.log(e)}})}})}),$(".get-min-salary").on("click",function(){session.consult(Employee,{success:function(){session.query("minSalaryList(".concat(employeeList,", Ans)."),{success:function(e){session.answer({success:function(e){e=session.format_answer(e).split("=")[1];e=(e=(e=e.split("[")[1]).split("]")[0]).split(","),$("#minSalary").val("".concat(e[1]," his salary is : ").concat(e[2]))}})},error:function(e){console.log(e)}})}})}),$(".get-max-exper").on("click",function(){session.consult(Employee,{success:function(){session.query("maxExperList(".concat(employeeList,", Ans)."),{success:function(e){session.answer({success:function(e){e=session.format_answer(e).split("=")[1];e=(e=(e=e.split("[")[1]).split("]")[0]).split(","),$("#maxExper").val("".concat(e[1]," has ").concat(e[3]," year of experiance and his salary is : ").concat(e[2]))}})},error:function(e){console.log(e)}})}})}),$(".get-min-exper").on("click",function(){session.consult(Employee,{success:function(){session.query("minExperList(".concat(employeeList,", Ans)."),{success:function(e){session.answer({success:function(e){e=session.format_answer(e).split("=")[1];e=(e=(e=e.split("[")[1]).split("]")[0]).split(","),$("#minExper").val("".concat(e[1]," has ").concat(e[3]," year of experiance and his salary is : ").concat(e[2]))}})},error:function(e){console.log(e)}})}})}),$(".get-sum").on("click",function(){session.consult(Employee,{success:function(){session.query("sum(".concat(employeeList,", Ans)."),{success:function(e){session.answer({success:function(e){e=session.format_answer(e).split("=")[1];$("#sum").val(e.split(".")[0])}})},error:function(e){console.log(e)}})}})}),$(".merge").on("click",function(){var n=this;session.consult(Employee,{success:function(){var e=$(n).hasClass("min")||$(n).hasClass("max")?($(n).toggleClass("min max"),$(n).hasClass("max")?$(n).data("merge"):$(n).data("merge")+1):($(n).addClass("max"),$(n).data("merge"));$(n).siblings().removeClass("max min"),session.query("mergesort".concat(e,"(").concat(employeeList,", Ans)."),{success:function(e){session.answer({success:function(e){employeeList=(employeeList=session.format_answer(e).split("=")[1]).slice(0,-1),initTable()}})},error:function(e){console.log(e)}})}})});var initTable=function(){$(".table .tbody").empty();var e=employeeList.split("],[");e[0]=e[0].slice(2,e[0].length),e[e.length-1]=e[e.length-1].slice(0,e[e.length-1].length-2),e.forEach(function(e,n){e=e.split(",");for(var m="",p=0,E="<tr>\n            <td>".concat(e[1],"</td>\n            <td>").concat(e[2],"</td>\n            <td>").concat(e[3],"</td>"),a=4;a<=e.length-1;a++)m+=", "+e[a],p++;E+=" <td>".concat(m.substring(1,m.length),"</td>\n                <td>").concat(p,"</td>\n            </tr>"),$(".table .tbody").append(E)})};initTable();