"use strict";var session=pl.create(),EmployeesJson=[],KnowledgesJson=[],TreeJson=[],Tree="",Employee="";$(function(){getKnowledges(),getRequireToLearns(),getEmployees()}),$(".get-best-to-specific-task").on("click",function(){var e=$("#knowlages-multiple-select").val();session.consult(Employee,{success:function(){session.query("solve(".concat(employeeList,", [").concat(e,"], Ans)."),{success:function(e){session.answer({success:function(e){var n=$("#best-to-specific-task");n.val("");e=session.format_answer(e);(e=(e=(e=e.split("=")[1]).trim().substring(1,e.length-4)).split(",")).forEach(function(e){n.val(n.val()+e+", ")}),n.val(n.val().substring(0,n.val().length-2)),""==n.val()&&n.val("لايوجد موظف يملك الخبرات المطلوبة كاملة")}})},error:function(e){console.log(e)}})}})});var callback=function e(n){!1!==n&&null!==n&&($(".list-maps").append("<li>".concat("Ans = [] ;"==pl.format_answer(n)?"الموظف متم الالخبرات المطلوبة":pl.format_answer(n),"</li>")),session.answer(e))};$(".get-to-learn").on("click",function(){$(".list-maps").text("");var e=$("#employeeList").val(),n=$("#kownlage-single-select").val();session.consult(Employee),session.query("getToLearn(".concat(e,", Ans, ").concat(n,")."));session.answer(callback)}),$(".get-max-salary").on("click",function(){session.consult(Employee,{success:function(){session.query("maxSalaryList(".concat(employeeList,", Ans)."),{success:function(e){session.answer({success:function(e){e=session.format_answer(e).split("=")[1];e=(e=(e=e.split("[")[1]).split("]")[0]).split(","),$("#maxSalary").val("".concat(e[1]," his salary is : ").concat(e[2]))}})},error:function(e){console.log(e)}})}})}),$(".get-min-salary").on("click",function(){session.consult(Employee,{success:function(){session.query("minSalaryList(".concat(employeeList,", Ans)."),{success:function(e){session.answer({success:function(e){e=session.format_answer(e).split("=")[1];e=(e=(e=e.split("[")[1]).split("]")[0]).split(","),$("#minSalary").val("".concat(e[1]," his salary is : ").concat(e[2]))}})},error:function(e){console.log(e)}})}})}),$(".get-max-exper").on("click",function(){session.consult(Employee,{success:function(){session.query("maxExperList(".concat(employeeList,", Ans)."),{success:function(e){session.answer({success:function(e){e=session.format_answer(e).split("=")[1];e=(e=(e=e.split("[")[1]).split("]")[0]).split(","),$("#maxExper").val("".concat(e[1]," has ").concat(e[3]," year of experiance and his salary is : ").concat(e[2]))}})},error:function(e){console.log(e)}})}})}),$(".get-min-exper").on("click",function(){session.consult(Employee,{success:function(){session.query("minExperList(".concat(employeeList,", Ans)."),{success:function(e){session.answer({success:function(e){e=session.format_answer(e).split("=")[1];e=(e=(e=e.split("[")[1]).split("]")[0]).split(","),$("#minExper").val("".concat(e[1]," has ").concat(e[3]," year of experiance and his salary is : ").concat(e[2]))}})},error:function(e){console.log(e)}})}})}),$(".get-sum").on("click",function(){session.consult(Employee,{success:function(){session.query("sum(".concat(employeeList,", Ans)."),{success:function(e){session.answer({success:function(e){e=session.format_answer(e).split("=")[1];$("#sum").val(e.split(".")[0])}})},error:function(e){console.log(e)}})}})}),$(".merge").on("click",function(){var n=this;session.consult(Employee,{success:function(){var e=$(n).hasClass("min")||$(n).hasClass("max")?($(n).toggleClass("min max"),$(n).hasClass("max")?$(n).data("merge"):$(n).data("merge")+1):($(n).addClass("max"),$(n).data("merge"));$(n).siblings().removeClass("max min"),session.query("mergesort".concat(e,"(").concat(employeeList,", Ans)."),{success:function(e){session.answer({success:function(e){employeeList=(employeeList=session.format_answer(e).split("=")[1]).slice(0,-1),initTable()}})},error:function(e){console.log(e)}})}})});var initTable=function(){$(".table .tbody").empty();var e=employeeList.split("],[");e[0]=e[0].slice(2,e[0].length),e[e.length-1]=e[e.length-1].slice(0,e[e.length-1].length-2),e.forEach(function(e,n){e=e.split(",");for(var m="",p=0,E="<tr>\n            <td>".concat(e[1],"</td>\n            <td>").concat(e[2],"</td>\n            <td>").concat(e[3],"</td>"),a=4;a<=e.length-1;a++)m+=", "+e[a],p++;E+=" <td>".concat(m.substring(1,m.length),"</td>\n                <td>").concat(p,"</td>\n            </tr>"),$(".table .tbody").append(E)})};function getKnowledges(){$.ajax({url:"https://localhost:44324/api/My/GetAllKnowledges",type:"GET"}).done(function(e){createKnowledgesSelects(KnowledgesJson=e)})}function createKnowledgesSelects(e){$("#kownlage-single-select").empty(),$("#knowlages-multiple-select").empty(),$("#Empknowlages").empty(),$("#parentKnowlagePage").empty(),e.forEach(function(e,n){var m="";m+='<option value="'.concat(e.name),m+=(0==n?'" selected>':'">').concat(e.name,"</option>"),$("#kownlage-single-select").append(m),$("#knowlages-multiple-select").append(m),$("#Empknowlages").append(m),$("#parentKnowlagePage").append(m)})}function getEmployees(){$.ajax({url:"https://localhost:44324/api/My/GetAllEmployees",type:"GET"}).done(function(e){createEmployeeListAndSelect(EmployeesJson=e)})}function createEmployeeListAndSelect(e){employeeList="[",$("#employeeList").empty(),e.forEach(function(m,e){var n="",p="";n+='<option value="',p+="[".concat(m.id," , ").concat(m.name," , ").concat(m.salary," , ").concat(m.experience," , ["),m.knowledgeDtos.forEach(function(e,n){0==n?p+="".concat(e.name," ,"):n==m.knowledgeDtos.length-1?p+=" ".concat(e.name):p+=" ".concat(e.name," ,")}),employeeList=employeeList+p+"]],",n+=p,n+=(0==e?']]" selected>':']]">').concat(m.name,"</option>"),$("#employeeList").append(n)}),employeeList=employeeList.substring(0,employeeList.length-1)+"]",initTable()}var employeeList="";function getRequireToLearns(){$.ajax({url:"https://localhost:44324/api/My/GetAllRequireToLearns",type:"GET"}).done(function(e){createTree(TreeJson=e)})}function createTree(e){console.log(e),Employee=Tree="",e.forEach(function(e){Tree+="next(".concat(e.first," , ").concat(e.second,").")}),Employee=Tree+prologRules}function postNewEmployee(){var e=$("#EmpName").val(),n=$("#EmpSalary").val(),m=$("#EmpExperience").val(),p=[];$("#Empknowlages").val().forEach(function(e){p.push({Name:e})});m=JSON.stringify({Id:0,Name:e,Salary:+n,Experience:+m,KnowledgeDtos:p});$.ajax({url:"https://localhost:44324/api/My/AddEmployee",data:m,type:"POST",dataType:"json",contentType:"application/json; charset=utf-8"}).done(function(e){EmployeesJson.push(e),createEmployeeListAndSelect(EmployeesJson),$("#EmpName").val(""),$("#EmpSalary").val(0),$("#EmpExperience").val(0),$("#addEmployee").modal("hide")})}function postNewEdge(){var e=$("#edgeSecond").val(),n=$("#parentKnowlagePage").val();console.log(e,n);e=JSON.stringify({first:n,second:e});$.ajax({url:"https://localhost:44324/api/My/AddRequireToLearn",data:e,type:"POST",dataType:"json",contentType:"application/json; charset=utf-8"}).done(function(e){console.log(e),TreeJson.push({first:e.first,second:e.second}),createTree(TreeJson),null!==e.returningNode&&(KnowledgesJson.push({name:e.returningNode}),getKnowledges(KnowledgesJson),$("#edgeSecond").val(""),$("#addKnowlageNode").modal("hide"))})}$(".addEmp").on("click",function(){postNewEmployee()}),$(".addEdge").on("click",function(){postNewEdge()});var prologRules="\n    % Reverse List \n    reverse([] , A , A). \n    reverse([H|T] , A , R):-  reverse(T , [H | A] , R).\n\n    % Get Path Of Learning \n    getPath(Start , Ans , End) :- Start == root , path(Start , ReversedAns , End) , reverse(ReversedAns , [] , Ans).\n    getPath(Start , [Start|TAns], End) :- Start \\== root , path(Start , ReversedAns , End) , reverse(ReversedAns , [] , TAns). \n\n    path(Start , [] , Start).\n    path(Start , [Cur | TR] , Cur) :- Start \\== Cur , next(NXT , Cur) , path(Start , TR , NXT).\n\n    % Member\n    member(X,[X|_]).\n    member(X,[Y|R]) :- X \\== Y , member(X , R).\n\n    % Intersection (SET A - SET B) \n    intersection([], M, []).\n    intersection([X|Y], M, [X|Z]) :- (\\+ member(X, M)), intersection(Y, M, Z).\n    intersection([X|Y], M, Z) :- member(X, M), intersection(Y, M, Z).\n    \n\n    % What Should Employee Learn?? \n    % [_ , _ , _ , _ , EmpKnowledge] employee list\n    % [employee id, employee name ,employee salary , employee experiance , employee Knowledge];\n    getToLearn([_ , _ , _ , _ , EmpKnowledge] , Ans , Target) :- getPath(root , Path , Target) , intersection(Path , EmpKnowledge , Ans).\n\n    % Finding the right employees for a specific task\n    searhOnItem(_ , [] , -1).\n    searhOnItem(Search , [Search | _] , 1).\n    searhOnItem(Search , [_ | TReq] , Flag) :- searhOnItem(Search , TReq , Flag).\n\n    matchIfContain([] , _ , 1).\n    matchIfContain([HEmp | _] , Req , -1) :- searhOnItem(HEmp , Req , Flag) , Flag < 0.\n    matchIfContain([HEmp | TEmp] , Req , Flag2) :- searhOnItem(HEmp , Req , Flag) , Flag > 0  , matchIfContain(TEmp , Req , Flag2).\n\n\n    solve([] , _ , []).\n\n    solve([[_ , EmpName , _ , _ , EmpKn] | TEmp] , Req , [EmpName | TRes]) :- \n    matchIfContain(Req , EmpKn , Flag) , Flag > 0 , solve(TEmp , Req , TRes).\n\n    solve([[_ , _ , _ , _ , EmpKn] | TEmp] , Req , Res) :- \n    matchIfContain(Req , EmpKn , Flag) , Flag < 0 , solve(TEmp , Req , Res).\n\n    % Finding The Max Salary Employee \n    maxSalaryList([X] , X).\n    maxSalaryList(\n        [\n            [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1],\n            [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] | TEmp\n        ] , Max) :- \n    maxSalaryList([[EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] | TEmp] , MaxRest) , \t\n    maxSalaryTwoEmployees(   [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] , MaxRest , Max).\n\n    maxSalaryTwoEmployees([EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] % first employee\n    , [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] % secound employee\n    , [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] % result employee max salary\n    ) :-  EmpSal1 >= EmpSal2.\n    \n    maxSalaryTwoEmployees([EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2]) :-  EmpSal1 <  EmpSal2.\n\n\n    % Finding The Min Salary Employee \n    minSalaryList([X] , X).\n    minSalaryList(\n        [\n            [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1],\n            [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] | TEmp\n        ] , Min) :- minSalaryList([[EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] | TEmp] , MinRest),\n    minSalaryTwoEmployees([EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] , MinRest , Min).\n\n    minSalaryTwoEmployees([EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] \n    , [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1]) :-  EmpSal1 <  EmpSal2.\n    \n    minSalaryTwoEmployees([EmpId1 , EmpName1 , EmpSal1 , EmpYears1 , EmpKnowledge1] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpYears2 , EmpKnowledge2] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpYears2 , EmpKnowledge2]) :-  EmpSal1 >= EmpSal2.\n\n    % Finding The Max Experience Employee \n    maxExperList([X] , X).\n    maxExperList(\n        [\n            [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1],\n            [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] | TEmp\n        ], Max) :- maxExperList([[EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] | TEmp] , MaxRest), \t\n    maxExperTwoEmployees(   [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] , MaxRest , Max).\n\n    maxExperTwoEmployees([EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] \n    , [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1]) :-  EmpExperience1 >= EmpExperience2.\n    \n    maxExperTwoEmployees([EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2]) :-  EmpExperience1 <  EmpExperience2.\n\n    % Finding The Min Experience Employee where Experience int number meaning year of Experience\n    minExperList([X] , X).\n    minExperList(\n        [\n            [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1],\n            [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] | TEmp\n        ], Min) :- minExperList([[EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] | TEmp] , MinRest),\n    minExperTwoEmployees(   [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] , MinRest , Min).\n\n    minExperTwoEmployees([EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] \n    , [EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1]) :-  EmpExperience1 <  EmpExperience2.\n    \n    minExperTwoEmployees([EmpId1 , EmpName1 , EmpSal1 , EmpExperience1 , EmpKnowledge1] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2] \n    , [EmpId2 , EmpName2 , EmpSal2 , EmpExperience2 , EmpKnowledge2]) :-  EmpExperience1 >= EmpExperience2.\n\n    % Arranging Employees According To The Salary In Ascending Order\n    mergesort1([] , []).\n    mergesort1([A] , [A]).\n    mergesort1([A , B | R] , S) :- split1([A , B | R] , L1 , L2) , mergesort1(L1 , S1) , mergesort1(L2 , S2) , merge1(S1 , S2 , S).\n\n    split1([] , [] , []). \n    split1([A] , [A] , []).\n    split1([A , B | R] , [A | Ra] , [B | Rb]) :- split1(R , Ra , Rb).\n\n    merge1(A , [] , A).\n    merge1([] , B , B).\n    merge1(\n        [\n            [EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra\n        ],[\n            [EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb\n        ],[\n            [EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | M\n        ]) :- EmpSalA =< EmpSalB\n        , merge1(Ra , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] , M).\n\n    merge1([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | M ]) :- EmpSalA  > EmpSalB \n        , merge1([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] , Rb , M).\n    \n    % Arranging Employees According To The Salary In Descending Order\n    mergesort2([] , []).\n    mergesort2([A] , [A]).\n    mergesort2([A , B | R] , S) :- split2([A , B | R] , L1 , L2) , mergesort2(L1 , S1) , mergesort2(L2 , S2) , merge2(S1 , S2 , S).\n    split2([] , [] , []). \n    split2([A] , [A] , []).\n    split2([A , B | R] , [A | Ra] , [B | Rb]) :- split2(R , Ra , Rb).\n    merge2(A , [] , A).\n    merge2([] , B , B).\n    merge2([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | M ]) :- EmpSalA  > EmpSalB \n        , merge2(Ra , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] , M).\n    merge2([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | M ]) :- EmpSalA =< EmpSalB \n        , merge2([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] , Rb , M).   \n    \n    % Arranging Employees According To The Experience In Ascending Order\n    mergesort3([] , []).\n    mergesort3([A] , [A]).\n    mergesort3([A , B | R] , S) :- split3([A , B | R] , L1 , L2) , mergesort3(L1 , S1) , mergesort3(L2 , S2) , merge3(S1 , S2 , S).\n    split3([] , [] , []). \n    split3([A] , [A] , []).\n    split3([A , B | R] , [A | Ra] , [B | Rb]) :- split3(R , Ra , Rb).\n    merge3(A , [] , A).\n    merge3([] , B , B).\n    merge3([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | M ]) :- EmpExperienceA =< EmpExperienceB \n        , merge3(Ra , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] , M).\n    merge3([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | M ]) :- EmpExperienceA  > EmpExperienceB \n        , merge3([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] , Rb , M).\n    \n    % Arranging Employees According To The Experience In Descending Order\n    mergesort4([] , []).\n    mergesort4([A] , [A]).\n    mergesort4([A , B | R] , S) :- split4([A , B | R] , L1 , L2) , mergesort4(L1 , S1) , mergesort4(L2 , S2) , merge4(S1 , S2 , S).\n    split4([] , [] , []). \n    split4([A] , [A] , []).\n    split4([A , B | R] , [A | Ra] , [B | Rb]) :- split4(R , Ra , Rb).\n    merge4(A , [] , A).\n    merge4([] , B , B).\n    merge4([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | M ]) :- EmpExperienceA  > EmpExperienceB \n        , merge4(Ra , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] , M).\n    merge4([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | M ]) :- EmpExperienceA =< EmpExperienceB \n        , merge4([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] , Rb , M).\n\n    % Arranging Employees According To The Number Of Knowledges In Ascending Order\n    mergesort5([] , []).\n    mergesort5([A] , [A]).\n    mergesort5([A , B | R] , S) :- split5([A , B | R] , L1 , L2) , mergesort5(L1 , S1) , mergesort5(L2 , S2) , merge5(S1 , S2 , S).\n    split5([] , [] , []). \n    split5([A] , [A] , []).\n    split5([A , B | R] , [A | Ra] , [B | Rb]) :- split5(R , Ra , Rb).\n    merge5(A , [] , A).\n    merge5([] , B , B).\n    merge5([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | M ]) :- \n        length(EmpKnowledgeA , NA) \n        , length(EmpKnowledgeB , NB) \n        , NA =< NB \n        , merge5(Ra , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] , M).\n    merge5([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | M ]) :- \n        length(EmpKnowledgeA , NA) \n        , length(EmpKnowledgeB , NB) \n        , NA  > NB \n        , merge5([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] , Rb , M).\n    \n    % Arranging Employees According To The Number Of Knowledges In Descending Order\n    mergesort6([] , []).\n    mergesort6([A] , [A]).\n    mergesort6([A , B | R] , S) :- split6([A , B | R] , L1 , L2) , mergesort6(L1 , S1) , mergesort6(L2 , S2) , merge6(S1 , S2 , S).\n    split6([] , [] , []). \n    split6([A] , [A] , []).\n    split6([A , B | R] , [A | Ra] , [B | Rb]) :- split6(R , Ra , Rb).\n    merge6(A , [] , A).\n    merge6([] , B , B).\n    merge6([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | M ]) :- \n        length(EmpKnowledgeA , NA) \n        , length(EmpKnowledgeB , NB) \n        , NA  > NB \n        , merge6(Ra , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] , M).\n    merge6([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | Rb] \n        , [[EmpIdB , EmpNameB , EmpSalB , EmpExperienceB , EmpKnowledgeB] | M ]) :- \n        length(EmpKnowledgeA , NA) \n        , length(EmpKnowledgeB , NB) \n        , NA =< NB \n        , merge6([[EmpIdA , EmpNameA , EmpSalA , EmpExperienceA , EmpKnowledgeA] | Ra] , Rb , M).\n    \n    % Counting Number Of Elements In List\n    length([] , 0).\n    length([H | T] , Length) :- length(T , Length1) , Length is Length1 + 1.\n\n    % Getting Sum Of Salarys \n    sum([] , 0).\n    sum([[_ , _ , Sal , _ , _] | TEmp] , Sum) :- sum(TEmp , Sum1) , Sum is Sum1 + Sal.\n";